#!/bin/bash
#Written by 5bitcube

string=$(sed 's/\s\//ɀ\//g' <<< "$2") 
IFS='ɀ' read -r -a files <<< "$string"

for file in "${files[@]}"; do
	echo -e $(basename "$file")
done ; echo

if [ "$1" == "-jpg" ]; then
	# Prompt user to input quality of the jpg (0-100).
	read -p "JPG quality (1-100 | 0 for optimal): " quality

	# Iterate through the array of files
	for file in "${files[@]}"; do
		convert -quality $quality -format jpg "$file" "${file%.*}-$quality.jpg"
	done

	# Prompt the user to confirm if they want to delete the original files
	read -p "Delete original? (y/n): " delete

	# If user confirms to delete, delete the original files
	if [ $delete == "y" ]; then
		for file in "${files[@]}"; do
			rm $file
			mv "${file%.*}-$quality.jpg" "${file%.*}.jpg"
		done
	fi
elif [ "$1" == "-mp4" ]; then

	#Function declarations
	time_to_ms() {
	  local time=$1
	  local h=$((10#$(echo $time | cut -d: -f1)))
	  local m=$((10#$(echo $time | cut -d: -f2)))
	  local s=$((10#$(echo $time | cut -d: -f3 | cut -d, -f1)))
	  local ms=$((10#$(echo $time | cut -d, -f2)))

	  echo $((h*60*60*1000+m*60*1000+s*1000+ms))
	}
	
	ms_to_time() {
	  local ms=$1
	  local hours=$((ms / 3600000))
	  ms=$((ms % 3600000))
	  local minutes=$((ms / 60000))
	  ms=$((ms % 60000))
	  local seconds=$((ms / 1000))
	  ms=$((ms % 1000))
	  printf "%02d:%02d:%02d.%03d" $hours $minutes $seconds $ms
	}
	
	get_line_from_file() {
		local line_number=$1
		local current_line=0

		while IFS= read -r line; do
		    ((current_line++))
		    if [[ $current_line -eq $line_number ]]; then
		        echo $line
		        break
		    fi
		done < durations.txt
	}
	
	#Ask the user
	read -p "MP4 from SRT? (y/n): " srt_question
	if [ "$srt_question" == "n" ]; then	
		read -p "Clip duration in milliseconds: " user_duration	
		duration=$(ms_to_time $user_duration)
	elif [ "$srt_question" == "y" ]; then	
		
		#Make a durations.txt file
		input_file="../subs.srt"
		output_file="durations.txt"
		counter=0	
		while IFS= read -r line; do
			counter=$((counter+1))
			if [ $(($counter % 4)) -eq 2 ]; then # check if the line number is a multiple of 4
				read -r start_time end_time <<< $(echo $line | awk '{print $1,$3}') # get the start and end times
				start_time=$(time_to_ms $start_time)
				end_time=$(time_to_ms $end_time)
				duration=$((end_time - start_time))
				duration=$(ms_to_time $duration)
				echo $duration >> $output_file
			fi
		done < $input_file
	
	fi	
	
	line_number=0
	echo "Starting up rendering engine..."
	N=4
	i=0
	pids=()

	for file in "${files[@]}"; do
		base=${file%.*}
		output_video="$base.mp4"
		((line_number++))
		if [ "$srt_question" == "y" ]; then
		    duration=$(get_line_from_file $line_number)
		fi
		echo $output_video
		ffmpeg -loop 1 -i "$file" -t "$duration" -r 30 -b:v 2k -c:v h264 -crf 18 "$output_video" &
		echo "Added process with ID $! to pids array"
		pids+=($!)
		((i++))
		if ((i%N==0)); then
		    for pid in ${pids[@]}; do
		        wait $pid
		        echo "Process with ID $pid has completed"
		    done
		    pids=()
		fi
	done

	# Wait for any remaining processes to complete
	for pid in ${pids[@]}; do
		wait $pid
	done

	echo "All done!"
	sleep 2
	
	rm "${files[@]}"
	if [ "$srt_question" == "y" ]; then
		rm "durations.txt"
	fi	
fi
